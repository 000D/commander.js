[{"tags":[],"description":{"full":"<p>commander<br />Copyright(c) 2011 TJ Holowaychuk <a href=\"&#109;&#97;&#x69;&#x6C;&#x74;&#111;:&#x74;&#x6A;&#x40;&#118;&#x69;&#115;ion&#45;&#x6D;&#x65;&#100;&#x69;&#97;&#46;&#99;&#97;\">&#x74;&#x6A;&#x40;&#118;&#x69;&#115;ion&#45;&#x6D;&#x65;&#100;&#x69;&#97;&#46;&#99;&#97;</a><br />MIT Licensed</p>","summary":"<p>commander<br />Copyright(c) 2011 TJ Holowaychuk <a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x74;&#x6A;&#64;&#118;&#105;&#x73;&#105;&#111;&#110;&#x2D;&#109;&#101;&#100;&#x69;&#x61;&#x2E;&#x63;&#97;\">&#x74;&#x6A;&#64;&#118;&#105;&#x73;&#105;&#111;&#110;&#x2D;&#109;&#101;&#100;&#x69;&#x61;&#x2E;&#x63;&#97;</a><br />MIT Licensed</p>","body":""},"ignore":true},{"tags":[],"description":{"full":"<p>Module dependencies.</p>","summary":"<p>Module dependencies.</p>","body":""},"ignore":false,"code":"var EventEmitter = require('events').EventEmitter\n  , path = require('path')\n  , tty = require('tty')\n  , basename = path.basename;","ctx":{"type":"declaration","name":"EventEmitter","value":"require('events').EventEmitter","string":"EventEmitter"}},{"tags":[],"description":{"full":"<p>Expose the root command.</p>","summary":"<p>Expose the root command.</p>","body":""},"ignore":false,"code":"exports = module.exports = new Command;"},{"tags":[],"description":{"full":"<p>Expose <code>Command</code>.</p>","summary":"<p>Expose <code>Command</code>.</p>","body":""},"ignore":false,"code":"exports.Command = Command;","ctx":{"type":"property","receiver":"exports","name":"Command","value":"Command","string":"exports.Command"}},{"tags":[],"description":{"full":"<p>Expose <code>Option</code>.</p>","summary":"<p>Expose <code>Option</code>.</p>","body":""},"ignore":false,"code":"exports.Option = Option;","ctx":{"type":"property","receiver":"exports","name":"Option","value":"Option","string":"exports.Option"}},{"tags":[{"type":"param","types":["String"],"name":"flags","description":""},{"type":"param","types":["String"],"name":"description","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Initialize a new <code>Option</code> with the given <code>flags</code> and <code>description</code>.</p>","summary":"<p>Initialize a new <code>Option</code> with the given <code>flags</code> and <code>description</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"function Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/)\n  this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description;\n}","ctx":{"type":"function","name":"Option","string":"Option()"}},{"tags":[{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return option name.</p>","summary":"<p>Return option name.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Option.prototype.name = function(){\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};","ctx":{"type":"method","constructor":"Option","name":"name","string":"Option.prototype.name()"}},{"tags":[{"type":"param","types":["String"],"name":"arg","description":""},{"type":"return","types":["Boolean"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Check if <code>arg</code> matches the short or long flag.</p>","summary":"<p>Check if <code>arg</code> matches the short or long flag.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Option.prototype.is = function(arg){\n  return arg == this.short\n    || arg == this.long;\n};","ctx":{"type":"method","constructor":"Option","name":"is","string":"Option.prototype.is()"}},{"tags":[{"type":"param","types":["String"],"name":"name","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Initialize a new <code>Command</code>.</p>","summary":"<p>Initialize a new <code>Command</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"function Command(name) {\n  this.commands = [];\n  this.options = [];\n  this.args = [];\n  this.name = name;\n}","ctx":{"type":"function","name":"Command","string":"Command()"}},{"tags":[],"description":{"full":"<p>Inherit from <code>EventEmitter.prototype</code>.</p>","summary":"<p>Inherit from <code>EventEmitter.prototype</code>.</p>","body":""},"ignore":false,"code":"Command.prototype.__proto__ = EventEmitter.prototype;","ctx":{"type":"property","constructor":"Command","name":"__proto__","value":"EventEmitter.prototype","string":"Command.prototype__proto__"}},{"tags":[{"type":"param","types":["String"],"name":"name","description":""},{"type":"return","types":["Command"],"description":"the new command"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Add command <code>name</code>.</p>\n\n<p>The <code>.action()</code> callback is invoked when the<br />command <code>name</code> is specified via <strong>ARGV</strong>,<br />and the remaining arguments are applied to the<br />function for access.</p>\n\n<p>When the <code>name</code> is \"*\" an un-matched command<br />will be passed as the first arg, followed by<br />the rest of <strong>ARGV</strong> remaining.</p>\n\n<h2>Examples</h2>\n\n<pre><code> program\n   .version('0.0.1')\n   .option('-C, --chdir &lt;path&gt;', 'change the working directory')\n   .option('-c, --config &lt;path&gt;', 'set config path. defaults to ./deploy.conf')\n   .option('-T, --no-tests', 'ignore test hook')\n\n program\n   .command('setup')\n   .description('run remote setup commands')\n   .action(function(){\n     console.log('setup');\n   });\n\n program\n   .command('exec &lt;cmd&gt;')\n   .description('run the given remote command')\n   .action(function(cmd){\n     console.log('exec \"%s\"', cmd);\n   });\n\n program\n   .command('*')\n   .description('deploy the given env')\n   .action(function(env){\n     console.log('deploying \"%s\"', env);\n   });\n\n program.parse(process.argv);\n</code></pre>","summary":"<p>Add command <code>name</code>.</p>","body":"<p>The <code>.action()</code> callback is invoked when the<br />command <code>name</code> is specified via <strong>ARGV</strong>,<br />and the remaining arguments are applied to the<br />function for access.</p>\n\n<p>When the <code>name</code> is \"*\" an un-matched command<br />will be passed as the first arg, followed by<br />the rest of <strong>ARGV</strong> remaining.</p>\n\n<h2>Examples</h2>\n\n<pre><code> program\n   .version('0.0.1')\n   .option('-C, --chdir &lt;path&gt;', 'change the working directory')\n   .option('-c, --config &lt;path&gt;', 'set config path. defaults to ./deploy.conf')\n   .option('-T, --no-tests', 'ignore test hook')\n\n program\n   .command('setup')\n   .description('run remote setup commands')\n   .action(function(){\n     console.log('setup');\n   });\n\n program\n   .command('exec &lt;cmd&gt;')\n   .description('run the given remote command')\n   .action(function(cmd){\n     console.log('exec \"%s\"', cmd);\n   });\n\n program\n   .command('*')\n   .description('deploy the given env')\n   .action(function(env){\n     console.log('deploying \"%s\"', env);\n   });\n\n program.parse(process.argv);\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.command = function(name){\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n  return cmd;\n};","ctx":{"type":"method","constructor":"Command","name":"command","string":"Command.prototype.command()"}},{"tags":[{"type":"param","types":["Array"],"name":"args","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Parse expected <code>args</code>.</p>\n\n<p>For example <code>[\"[type]\"]</code> becomes <code>[{ required: false, name: 'type' }]</code>.</p>","summary":"<p>Parse expected <code>args</code>.</p>","body":"<p>For example <code>[\"[type]\"]</code> becomes <code>[{ required: false, name: 'type' }]</code>.</p>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.parseExpectedArgs = function(args){\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg){\n    switch (arg[0]) {\n      case '<':\n        self.args.push({ required: true, name: arg.slice(1, -1) });\n        break;\n      case '[':\n        self.args.push({ required: false, name: arg.slice(1, -1) });\n        break;\n    }\n  });\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"parseExpectedArgs","string":"Command.prototype.parseExpectedArgs()"}},{"tags":[{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Register callback <code>fn</code> for the command.</p>\n\n<h2>Examples</h2>\n\n<pre><code> program\n   .command('help')\n   .description('display verbose help')\n   .action(function(){\n      // output help here\n   });\n</code></pre>","summary":"<p>Register callback <code>fn</code> for the command.</p>","body":"<h2>Examples</h2>\n\n<pre><code> program\n   .command('help')\n   .description('display verbose help')\n   .action(function(){\n      // output help here\n   });\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.action = function(fn){\n  var self = this;\n  this.parent.on(this.name, function(args){\n    self.args.forEach(function(arg, i){\n      if (arg.required && null == args[i]) {\n        self.missingArgument(arg.name);\n      }\n    });\n    fn.apply(this, args);\n  });\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"action","string":"Command.prototype.action()"}},{"tags":[{"type":"param","types":["String"],"name":"flags","description":""},{"type":"param","types":["String"],"name":"description","description":""},{"type":"param","types":["Function","Mixed"],"name":"fn","description":"or default"},{"type":"param","types":["Mixed"],"name":"defaultValue","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Define option with <code>flags</code>, <code>description</code> and optional<br />coercion <code>fn</code>. </p>\n\n<p>The <code>flags</code> string should contain both the short and long flags,<br />separated by comma, a pipe or space. The following are all valid<br />all will output this way when <code>--help</code> is used.</p>\n\n<p>\"-p, --pepper\"<br />   \"-p|--pepper\"<br />   \"-p --pepper\"</p>\n\n<h2>Examples</h2>\n\n<pre><code>// simple boolean defaulting to false\nprogram.option('-p, --pepper', 'add pepper');\n\n--pepper\nprogram.pepper\n// =&gt; Boolean\n\n// simple boolean defaulting to false\nprogram.option('-C, --no-cheese', 'remove cheese');\n\nprogram.cheese\n// =&gt; true\n\n--no-cheese\nprogram.cheese\n// =&gt; true\n\n// required argument\nprogram.option('-C, --chdir &lt;path&gt;', 'change the working directory');\n\n--chdir /tmp\nprogram.chdir\n// =&gt; \"/tmp\"\n\n// optional argument\nprogram.option('-c, --cheese [type]', 'add cheese [marble]');\n</code></pre>","summary":"<p>Define option with <code>flags</code>, <code>description</code> and optional<br />coercion <code>fn</code>. </p>","body":"<p>The <code>flags</code> string should contain both the short and long flags,<br />separated by comma, a pipe or space. The following are all valid<br />all will output this way when <code>--help</code> is used.</p>\n\n<p>\"-p, --pepper\"<br />   \"-p|--pepper\"<br />   \"-p --pepper\"</p>\n\n<h2>Examples</h2>\n\n<pre><code>// simple boolean defaulting to false\nprogram.option('-p, --pepper', 'add pepper');\n\n--pepper\nprogram.pepper\n// =&gt; Boolean\n\n// simple boolean defaulting to false\nprogram.option('-C, --no-cheese', 'remove cheese');\n\nprogram.cheese\n// =&gt; true\n\n--no-cheese\nprogram.cheese\n// =&gt; true\n\n// required argument\nprogram.option('-C, --chdir &lt;path&gt;', 'change the working directory');\n\n--chdir /tmp\nprogram.chdir\n// =&gt; \"/tmp\"\n\n// optional argument\nprogram.option('-c, --cheese [type]', 'add cheese [marble]');\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.option = function(flags, description, fn, defaultValue){\n  var self = this\n    , option = new Option(flags, description)\n    , oname = option.name()\n    , name = camelcase(oname);\n\n  // default as 3rd arg\n  if ('function' != typeof fn) defaultValue = fn, fn = null;\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (false == option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (false == option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (undefined !== defaultValue) self[name] = defaultValue;\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on(oname, function(val){\n    // coercion\n    if (null != val && fn) val = fn(val);\n\n    // unassigned or bool\n    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {\n      // if no value, bool true, and we have a default, then use it!\n      if (null == val) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (null !== val) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"option","string":"Command.prototype.option()"}},{"tags":[{"type":"param","types":["Array"],"name":"argv","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Parse <code>argv</code>, settings options and invoking commands when defined.</p>","summary":"<p>Parse <code>argv</code>, settings options and invoking commands when defined.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Command.prototype.parse = function(argv){\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  if (!this.name) this.name = basename(argv[1]);\n\n  // process argv\n  this.args = this.parseOptions(this.normalize(argv));\n  return this.parseArgs(this.args);\n};","ctx":{"type":"method","constructor":"Command","name":"parse","string":"Command.prototype.parse()"}},{"tags":[{"type":"param","types":["Array"],"name":"args","description":""},{"type":"return","types":["Array"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Normalize <code>args</code>, splitting joined short flags. For example<br />the arg \"-abc\" is equivalent to \"-a -b -c\".</p>","summary":"<p>Normalize <code>args</code>, splitting joined short flags. For example<br />the arg \"-abc\" is equivalent to \"-a -b -c\".</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.normalize = function(args){\n  var ret = []\n    , arg;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {\n      arg.slice(1).split('').forEach(function(c){\n        ret.push('-' + c);\n      });\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};","ctx":{"type":"method","constructor":"Command","name":"normalize","string":"Command.prototype.normalize()"}},{"tags":[{"type":"param","types":["Array"],"name":"args","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"private"}],"description":{"full":"<p>Parse command <code>args</code>.</p>\n\n<p>When listener(s) are available those<br />callbacks are invoked, otherwise the \"*\"<br />event is emitted and those actions are invoked.</p>","summary":"<p>Parse command <code>args</code>.</p>","body":"<p>When listener(s) are available those<br />callbacks are invoked, otherwise the \"*\"<br />event is emitted and those actions are invoked.</p>"},"isPrivate":true,"ignore":false,"code":"Command.prototype.parseArgs = function(args){\n  var cmds = this.commands\n    , len = cmds.length\n    , name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args);\n    } else {\n      this.emit('*', args);\n    }\n  }\n\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"parseArgs","string":"Command.prototype.parseArgs()"}},{"tags":[{"type":"param","types":["String"],"name":"arg","description":""},{"type":"return","types":["Option"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return an option matching <code>arg</code> if any.</p>","summary":"<p>Return an option matching <code>arg</code> if any.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.optionFor = function(arg){\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};","ctx":{"type":"method","constructor":"Command","name":"optionFor","string":"Command.prototype.optionFor()"}},{"tags":[{"type":"param","types":["Array"],"name":"argv","description":""},{"type":"return","types":["Array"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Parse options from <code>argv</code> returning <code>argv</code><br />void of these options.</p>","summary":"<p>Parse options from <code>argv</code> returning <code>argv</code><br />void of these options.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Command.prototype.parseOptions = function(argv){\n  var args = []\n    , argv = argv.slice(2)\n    , len = argv.length\n    , option\n    , arg;\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (null == arg) return this.optionMissingArgument(option);\n        if ('-' == arg[0]) return this.optionMissingArgument(option, arg);\n        this.emit(option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i+1];\n        if (null == arg || '-' == arg[0]) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit(option.name(), arg);\n      // bool\n      } else {\n        this.emit(option.name());\n      }\n      continue;\n    }\n    \n    // looks like an option\n    if (arg.length > 1 && '-' == arg[0]) {\n      this.unknownOption(arg);\n    }\n    \n    // arg\n    args.push(arg);\n  }\n\n  return args;\n};","ctx":{"type":"method","constructor":"Command","name":"parseOptions","string":"Command.prototype.parseOptions()"}},{"tags":[{"type":"param","types":["String"],"name":"name","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Argument <code>name</code> is missing.</p>","summary":"<p>Argument <code>name</code> is missing.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.missingArgument = function(name){\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};","ctx":{"type":"method","constructor":"Command","name":"missingArgument","string":"Command.prototype.missingArgument()"}},{"tags":[{"type":"param","types":["String"],"name":"option","description":""},{"type":"param","types":["String"],"name":"flag","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p><code>Option</code> is missing an argument, but received <code>flag</code> or nothing.</p>","summary":"<p><code>Option</code> is missing an argument, but received <code>flag</code> or nothing.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.optionMissingArgument = function(option, flag){\n  console.error();\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n  console.error();\n  process.exit(1);\n};","ctx":{"type":"method","constructor":"Command","name":"optionMissingArgument","string":"Command.prototype.optionMissingArgument()"}},{"tags":[{"type":"param","types":["String"],"name":"flag","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Unknown option <code>flag</code>.</p>","summary":"<p>Unknown option <code>flag</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.unknownOption = function(flag){\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};","ctx":{"type":"method","constructor":"Command","name":"unknownOption","string":"Command.prototype.unknownOption()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["Command"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Set the program version to <code>str</code>.</p>\n\n<p>This method auto-registers the \"-v, --version\" flag<br />which will print the version number when passed.</p>","summary":"<p>Set the program version to <code>str</code>.</p>","body":"<p>This method auto-registers the \"-v, --version\" flag<br />which will print the version number when passed.</p>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.version = function(str){\n  if (0 == arguments.length) return this._version;\n  this._version = str;\n  this.option('-v, --version', 'output the version number');\n  this.on('version', function(){\n    console.log(str);\n    process.exit(0);\n  });\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"version","string":"Command.prototype.version()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["String","Command"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Set the description <code>str</code>.</p>","summary":"<p>Set the description <code>str</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Command.prototype.description = function(str){\n  if (0 == arguments.length) return this._description;\n  this._description = str;\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"description","string":"Command.prototype.description()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["String","Command"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Set / get the command usage <code>str</code>.</p>","summary":"<p>Set / get the command usage <code>str</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Command.prototype.usage = function(str){\n  var usage = '[options'\n    + (this.commands.length ? '] [command' : '')\n    + ']';\n  if (0 == arguments.length) return this._usage || usage;\n  this._usage = str;\n  return this;\n};","ctx":{"type":"method","constructor":"Command","name":"usage","string":"Command.prototype.usage()"}},{"tags":[{"type":"return","types":["Number"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return the largest option length.</p>","summary":"<p>Return the largest option length.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.largestOptionLength = function(){\n  return this.options.reduce(function(max, option){\n    return Math.max(max, option.flags.length);\n  }, 0);\n};","ctx":{"type":"method","constructor":"Command","name":"largestOptionLength","string":"Command.prototype.largestOptionLength()"}},{"tags":[{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return help for options.</p>","summary":"<p>Return help for options.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.optionHelp = function(){\n  var width = this.largestOptionLength();\n  return this.options.map(function(option){\n    return pad(option.flags, width)\n      + '  ' + option.description;\n  }).join('\\n');\n};","ctx":{"type":"method","constructor":"Command","name":"optionHelp","string":"Command.prototype.optionHelp()"}},{"tags":[{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return command help documentation.</p>","summary":"<p>Return command help documentation.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.commandHelp = function(){\n  if (!this.commands.length) return '';\n  return [\n      ''\n    , '  Commands:'\n    , ''\n    , this.commands.map(function(cmd){\n      var args = cmd.args.map(function(arg){\n        return arg.required\n          ? '<' + arg.name + '>'\n          : '[' + arg.name + ']';\n      }).join(' ');\n      return cmd.name + ' ' + args\n        + (cmd.description()\n          ? '\\n' + cmd.description()\n          : '');\n    }).join('\\n\\n').replace(/^/gm, '    ')\n    , ''\n  ].join('\\n');\n};","ctx":{"type":"method","constructor":"Command","name":"commandHelp","string":"Command.prototype.commandHelp()"}},{"tags":[{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Return program help documentation.</p>","summary":"<p>Return program help documentation.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.helpInformation = function(){\n  return [\n      ''\n    , '  Usage: ' + this.name + ' ' + this.usage()\n    , '' + this.commandHelp()\n    , '  Options:'\n    , ''\n    , '' + this.optionHelp().replace(/^/gm, '    ')\n    , ''\n    , ''\n  ].join('\\n');\n};","ctx":{"type":"method","constructor":"Command","name":"helpInformation","string":"Command.prototype.helpInformation()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Prompt for a <code>Number</code>.</p>","summary":"<p>Prompt for a <code>Number</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.promptForNumber = function(str, fn){\n  this.promptSingleLine(str, function(val){\n    val = Number(val);\n    if (isNaN(val)) return program.promptForNumber(str + '(must be a number) ', fn);\n    fn(val);\n  });\n};","ctx":{"type":"method","constructor":"Command","name":"promptForNumber","string":"Command.prototype.promptForNumber()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Prompt for a <code>Date</code>.</p>","summary":"<p>Prompt for a <code>Date</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.promptForDate = function(str, fn){\n  this.promptSingleLine(str, function(val){\n    val = new Date(val);\n    if (isNaN(val.getTime())) return program.promptForDate(str + '(must be a date) ', fn);\n    fn(val);\n  });\n};","ctx":{"type":"method","constructor":"Command","name":"promptForDate","string":"Command.prototype.promptForDate()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Single-line prompt.</p>","summary":"<p>Single-line prompt.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.promptSingleLine = function(str, fn){\n  if ('function' == typeof arguments[2]) {\n    return this['promptFor' + (fn.name || fn)](str, arguments[2]);\n  }\n\n  process.stdout.write(str);\n  process.stdin.setEncoding('utf8');\n  process.stdin.once('data', function(val){\n    fn(val);\n  }).resume();\n};","ctx":{"type":"method","constructor":"Command","name":"promptSingleLine","string":"Command.prototype.promptSingleLine()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Multi-line prompt.</p>","summary":"<p>Multi-line prompt.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Command.prototype.promptMultiLine = function(str, fn){\n  var buf = '';\n  console.log(str);\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function(val){\n    if ('\\n' == val) {\n      process.stdin.removeAllListeners('data');\n      fn(buf);\n    } else {\n      buf += val;\n    }\n  }).resume();\n};","ctx":{"type":"method","constructor":"Command","name":"promptMultiLine","string":"Command.prototype.promptMultiLine()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Prompt <code>str</code> and callback <code>fn(val)</code></p>\n\n<p>Commander supports single-line and multi-line prompts.<br />To issue a single-line prompt simply add white-space<br />to the end of <code>str</code>, something like \"name: \", whereas<br />for a multi-line prompt omit this \"description:\".</p>\n\n<h2>Examples</h2>\n\n<pre><code>program.prompt('Username: ', function(name){\n  console.log('hi %s', name);\n});\n\nprogram.prompt('Description:', function(desc){\n  console.log('description was \"%s\"', desc.trim());\n});\n</code></pre>","summary":"<p>Prompt <code>str</code> and callback <code>fn(val)</code></p>","body":"<p>Commander supports single-line and multi-line prompts.<br />To issue a single-line prompt simply add white-space<br />to the end of <code>str</code>, something like \"name: \", whereas<br />for a multi-line prompt omit this \"description:\".</p>\n\n<h2>Examples</h2>\n\n<pre><code>program.prompt('Username: ', function(name){\n  console.log('hi %s', name);\n});\n\nprogram.prompt('Description:', function(desc){\n  console.log('description was \"%s\"', desc.trim());\n});\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.prompt = function(str, fn){\n  if (/ $/.test(str)) return this.promptSingleLine.apply(this, arguments);\n  this.promptMultiLine(str, fn);\n};","ctx":{"type":"method","constructor":"Command","name":"prompt","string":"Command.prototype.prompt()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["String"],"name":"mask","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Prompt for password with <code>str</code>, <code>mask</code> char and callback <code>fn(val)</code>.</p>\n\n<p>The mask string defaults to '', aka no output is<br />written while typing, you may want to use \"*\" etc.</p>\n\n<h2>Examples</h2>\n\n<pre><code>program.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n</code></pre>","summary":"<p>Prompt for password with <code>str</code>, <code>mask</code> char and callback <code>fn(val)</code>.</p>","body":"<p>The mask string defaults to '', aka no output is<br />written while typing, you may want to use \"*\" etc.</p>\n\n<h2>Examples</h2>\n\n<pre><code>program.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.password = function(str, mask, fn){\n  var self = this\n    , buf = '';\n\n  // default mask\n  if ('function' == typeof mask) {\n    fn = mask;\n    mask = '';\n  }\n\n  tty.setRawMode(true);\n  process.stdout.write(str);\n\n  // keypress\n  process.stdin.on('keypress', function(c, key){\n    if (key && 'enter' == key.name) {\n      console.log();\n      process.stdin.removeAllListeners('keypress');\n      tty.setRawMode(false);\n      if (!buf.trim().length) return self.password(str, mask, fn);\n      fn(buf);\n      return;\n    }\n\n    if (key && key.ctrl && 'c' == key.name) {\n      console.log('%s', buf);\n      process.exit();\n    }\n\n    process.stdout.write(mask);\n    buf += c;\n  }).resume();\n};","ctx":{"type":"method","constructor":"Command","name":"password","string":"Command.prototype.password()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Confirmation prompt with <code>str</code> and callback <code>fn(bool)</code></p>\n\n<h2>Examples</h2>\n\n<pre><code> program.confirm('continue? ', function(ok){\n   console.log(' got %j', ok);\n   process.stdin.destroy();\n });\n</code></pre>","summary":"<p>Confirmation prompt with <code>str</code> and callback <code>fn(bool)</code></p>","body":"<h2>Examples</h2>\n\n<pre><code> program.confirm('continue? ', function(ok){\n   console.log(' got %j', ok);\n   process.stdin.destroy();\n });\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.confirm = function(str, fn){\n  var self = this;\n  this.prompt(str, function(ok){\n    if (!ok.trim()) {\n      return self.confirm(str, fn);\n    }\n    fn(parseBool(ok));\n  });\n};","ctx":{"type":"method","constructor":"Command","name":"confirm","string":"Command.prototype.confirm()"}},{"tags":[{"type":"param","types":["Array"],"name":"list","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Choice prompt with <code>list</code> of items and callback <code>fn(index, item)</code></p>\n\n<h2>Examples</h2>\n\n<pre><code> var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];\n\n console.log('Choose the coolest pet:');\n program.choose(list, function(i){\n   console.log('you chose %d \"%s\"', i, list[i]);\n   process.stdin.destroy();\n });\n</code></pre>","summary":"<p>Choice prompt with <code>list</code> of items and callback <code>fn(index, item)</code></p>","body":"<h2>Examples</h2>\n\n<pre><code> var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];\n\n console.log('Choose the coolest pet:');\n program.choose(list, function(i){\n   console.log('you chose %d \"%s\"', i, list[i]);\n   process.stdin.destroy();\n });\n</code></pre>"},"isPrivate":false,"ignore":false,"code":"Command.prototype.choose = function(list, fn){\n  var self = this;\n\n  list.forEach(function(item, i){\n    console.log('  %d) %s', i + 1, item);\n  });\n\n  function again() {\n    self.prompt('  : ', function(val){\n      val = parseInt(val, 10) - 1;\n      if (null == list[val]) {\n        again();\n      } else {\n        fn(val, list[val]);\n      }\n    });\n  }\n\n  again();\n};","ctx":{"type":"method","constructor":"Command","name":"choose","string":"Command.prototype.choose()"}},{"tags":[{"type":"param","types":["String"],"name":"flag","description":""},{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Camel-case the given <code>flag</code></p>","summary":"<p>Camel-case the given <code>flag</code></p>","body":""},"isPrivate":true,"ignore":false,"code":"function camelcase(flag) {\n  return flag.split('-').reduce(function(str, word){\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}","ctx":{"type":"function","name":"camelcase","string":"camelcase()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["Boolean"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Parse a boolean <code>str</code>.</p>","summary":"<p>Parse a boolean <code>str</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function parseBool(str) {\n  return /^y|yes|ok|true$/i.test(str);\n}","ctx":{"type":"function","name":"parseBool","string":"parseBool()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"param","types":["Number"],"name":"width","description":""},{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Pad <code>str</code> to <code>width</code>.</p>","summary":"<p>Pad <code>str</code> to <code>width</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}","ctx":{"type":"function","name":"pad","string":"pad()"}},{"tags":[],"description":{"full":"<p>Default -h, --help option.</p>","summary":"<p>Default -h, --help option.</p>","body":""},"ignore":false,"code":"exports.option('-h, --help', 'output usage information');\nexports.on('help', function(){\n  process.stdout.write(this.helpInformation());\n  exports.emit('--help');\n  process.exit(0);\n});"}]