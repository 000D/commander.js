[
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies.</p>",
      "summary": "<p>Module dependencies.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1,
    "codeStart": 5,
    "code": "var EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar readlink = require('graceful-readlink').readlinkSync;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');",
    "ctx": {
      "type": "declaration",
      "name": "EventEmitter",
      "value": "require('events').EventEmitter",
      "string": "EventEmitter"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Expose the root command.</p>",
      "summary": "<p>Expose the root command.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 13,
    "codeStart": 17,
    "code": "exports = module.exports = new Command();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Expose <code>Command</code>.</p>",
      "summary": "<p>Expose <code>Command</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 23,
    "code": "exports.Command = Command;",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "Command",
      "value": "Command",
      "string": "exports.Command"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Expose <code>Option</code>.</p>",
      "summary": "<p>Expose <code>Option</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 29,
    "code": "exports.Option = Option;",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "Option",
      "value": "Option",
      "string": "exports.Option"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "flags",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "description",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Initialize a new <code>Option</code> with the given <code>flags</code> and <code>description</code>.</p>",
      "summary": "<p>Initialize a new <code>Option</code> with the given <code>flags</code> and <code>description</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 39,
    "code": "function Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}",
    "ctx": {
      "type": "function",
      "name": "Option",
      "string": "Option()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return option name.</p>",
      "summary": "<p>Return option name.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 50,
    "codeStart": 57,
    "code": "Option.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Option",
      "cons": "Option",
      "name": "name",
      "string": "Option.prototype.name()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "arg",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Check if <code>arg</code> matches the short or long flag.</p>",
      "summary": "<p>Check if <code>arg</code> matches the short or long flag.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 71,
    "code": "Option.prototype.is = function(arg) {\n  return arg == this.short || arg == this.long;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Option",
      "cons": "Option",
      "name": "is",
      "string": "Option.prototype.is()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Initialize a new <code>Command</code>.</p>",
      "summary": "<p>Initialize a new <code>Command</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 75,
    "codeStart": 82,
    "code": "function Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}",
    "ctx": {
      "type": "function",
      "name": "Command",
      "string": "Command()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Inherit from <code>EventEmitter.prototype</code>.</p>",
      "summary": "<p>Inherit from <code>EventEmitter.prototype</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 91,
    "codeStart": 95,
    "code": "Command.prototype.__proto__ = EventEmitter.prototype;",
    "ctx": {
      "type": "property",
      "constructor": "Command",
      "cons": "Command",
      "name": "__proto__",
      "value": "EventEmitter.prototype",
      "string": "Command.prototype.__proto__"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "[desc]",
        "description": "<p>for git-style sub-commands</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>the new command</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Add command <code>name</code>.</p><p>The <code>.action()</code> callback is invoked when the<br />command <code>name</code> is specified via <strong>ARGV</strong>,<br />and the remaining arguments are applied to the<br />function for access.</p><p>When the <code>name</code> is &quot;*&quot; an un-matched command<br />will be passed as the first arg, followed by<br />the rest of <strong>ARGV</strong> remaining.</p><p>Examples:</p><pre><code> program\n   .version(&#39;0.0.1&#39;)\n   .option(&#39;-C, --chdir &lt;path&gt;&#39;, &#39;change the working directory&#39;)\n   .option(&#39;-c, --config &lt;path&gt;&#39;, &#39;set config path. defaults to ./deploy.conf&#39;)\n   .option(&#39;-T, --no-tests&#39;, &#39;ignore test hook&#39;)\n\n program\n   .command(&#39;setup&#39;)\n   .description(&#39;run remote setup commands&#39;)\n   .action(function() {\n     console.log(&#39;setup&#39;);\n   });\n\n program\n   .command(&#39;exec &lt;cmd&gt;&#39;)\n   .description(&#39;run the given remote command&#39;)\n   .action(function(cmd) {\n     console.log(&#39;exec &quot;%s&quot;&#39;, cmd);\n   });\n\n program\n   .command(&#39;teardown &lt;dir&gt; [otherDirs...]&#39;)\n   .description(&#39;run teardown commands&#39;)\n   .action(function(dir, otherDirs) {\n     console.log(&#39;dir &quot;%s&quot;&#39;, dir);\n     if (otherDirs) {\n       otherDirs.forEach(function (oDir) {\n         console.log(&#39;dir &quot;%s&quot;&#39;, oDir);\n       });\n     }\n   });\n\n program\n   .command(&#39;*&#39;)\n   .description(&#39;deploy the given env&#39;)\n   .action(function(env) {\n     console.log(&#39;deploying &quot;%s&quot;&#39;, env);\n   });\n\n program.parse(process.argv);\n</code></pre>",
      "summary": "<p>Add command <code>name</code>.</p>",
      "body": "<p>The <code>.action()</code> callback is invoked when the<br />command <code>name</code> is specified via <strong>ARGV</strong>,<br />and the remaining arguments are applied to the<br />function for access.</p><p>When the <code>name</code> is &quot;*&quot; an un-matched command<br />will be passed as the first arg, followed by<br />the rest of <strong>ARGV</strong> remaining.</p><p>Examples:</p><pre><code> program\n   .version(&#39;0.0.1&#39;)\n   .option(&#39;-C, --chdir &lt;path&gt;&#39;, &#39;change the working directory&#39;)\n   .option(&#39;-c, --config &lt;path&gt;&#39;, &#39;set config path. defaults to ./deploy.conf&#39;)\n   .option(&#39;-T, --no-tests&#39;, &#39;ignore test hook&#39;)\n\n program\n   .command(&#39;setup&#39;)\n   .description(&#39;run remote setup commands&#39;)\n   .action(function() {\n     console.log(&#39;setup&#39;);\n   });\n\n program\n   .command(&#39;exec &lt;cmd&gt;&#39;)\n   .description(&#39;run the given remote command&#39;)\n   .action(function(cmd) {\n     console.log(&#39;exec &quot;%s&quot;&#39;, cmd);\n   });\n\n program\n   .command(&#39;teardown &lt;dir&gt; [otherDirs...]&#39;)\n   .description(&#39;run teardown commands&#39;)\n   .action(function(dir, otherDirs) {\n     console.log(&#39;dir &quot;%s&quot;&#39;, dir);\n     if (otherDirs) {\n       otherDirs.forEach(function (oDir) {\n         console.log(&#39;dir &quot;%s&quot;&#39;, oDir);\n       });\n     }\n   });\n\n program\n   .command(&#39;*&#39;)\n   .description(&#39;deploy the given env&#39;)\n   .action(function(env) {\n     console.log(&#39;deploying &quot;%s&quot;&#39;, env);\n   });\n\n program.parse(process.argv);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 97,
    "codeStart": 158,
    "code": "Command.prototype.command = function(name, desc, opts) {\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "command",
      "string": "Command.prototype.command()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Define argument syntax for the top-level command.</p>",
      "summary": "<p>Define argument syntax for the top-level command.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 179,
    "codeStart": 185,
    "code": "Command.prototype.arguments = function (desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "arguments",
      "string": "Command.prototype.arguments()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Add an implicit <code>help [cmd]</code> subcommand<br />which invokes <code>--help</code> for the given command.</p>",
      "summary": "<p>Add an implicit <code>help [cmd]</code> subcommand<br />which invokes <code>--help</code> for the given command.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 189,
    "codeStart": 196,
    "code": "Command.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "addImplicitHelpCommand",
      "string": "Command.prototype.addImplicitHelpCommand()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "args",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Parse expected <code>args</code>.</p><p>For example <code>[&quot;[type]&quot;]</code> becomes <code>[{ required: false, name: &#39;type&#39; }]</code>.</p>",
      "summary": "<p>Parse expected <code>args</code>.</p>",
      "body": "<p>For example <code>[&quot;[type]&quot;]</code> becomes <code>[{ required: false, name: &#39;type&#39; }]</code>.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 200,
    "codeStart": 210,
    "code": "Command.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseExpectedArgs",
      "string": "Command.prototype.parseExpectedArgs()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "fn",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Register callback <code>fn</code> for the command.</p><p>Examples:</p><pre><code> program\n   .command(&#39;help&#39;)\n   .description(&#39;display verbose help&#39;)\n   .action(function() {\n      // output help here\n   });\n</code></pre>",
      "summary": "<p>Register callback <code>fn</code> for the command.</p>",
      "body": "<p>Examples:</p><pre><code> program\n   .command(&#39;help&#39;)\n   .description(&#39;display verbose help&#39;)\n   .action(function() {\n      // output help here\n   });\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 241,
    "codeStart": 258,
    "code": "Command.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && null == args[i]) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on(name, listener);\n  if (this._alias) parent.on(this._alias, listener);\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "action",
      "string": "Command.prototype.action()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "flags",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "description",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "fn",
        "description": "<p>or default</p>",
        "types": [
          "Function",
          "Mixed"
        ],
        "typesDescription": "<code>Function</code>|<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "defaultValue",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Define option with <code>flags</code>, <code>description</code> and optional<br />coercion <code>fn</code>.</p><p>The <code>flags</code> string should contain both the short and long flags,<br />separated by comma, a pipe or space. The following are all valid<br />all will output this way when <code>--help</code> is used.</p><p>   &quot;-p, --pepper&quot;<br />   &quot;-p|--pepper&quot;<br />   &quot;-p --pepper&quot;</p><p>Examples:</p><pre><code>// simple boolean defaulting to false\nprogram.option(&#39;-p, --pepper&#39;, &#39;add pepper&#39;);\n\n--pepper\nprogram.pepper\n// =&gt; Boolean\n\n// simple boolean defaulting to true\nprogram.option(&#39;-C, --no-cheese&#39;, &#39;remove cheese&#39;);\n\nprogram.cheese\n// =&gt; true\n\n--no-cheese\nprogram.cheese\n// =&gt; false\n\n// required argument\nprogram.option(&#39;-C, --chdir &lt;path&gt;&#39;, &#39;change the working directory&#39;);\n\n--chdir /tmp\nprogram.chdir\n// =&gt; &quot;/tmp&quot;\n\n// optional argument\nprogram.option(&#39;-c, --cheese [type]&#39;, &#39;add cheese [marble]&#39;);\n</code></pre>",
      "summary": "<p>Define option with <code>flags</code>, <code>description</code> and optional<br />coercion <code>fn</code>.</p>",
      "body": "<p>The <code>flags</code> string should contain both the short and long flags,<br />separated by comma, a pipe or space. The following are all valid<br />all will output this way when <code>--help</code> is used.</p><p>   &quot;-p, --pepper&quot;<br />   &quot;-p|--pepper&quot;<br />   &quot;-p --pepper&quot;</p><p>Examples:</p><pre><code>// simple boolean defaulting to false\nprogram.option(&#39;-p, --pepper&#39;, &#39;add pepper&#39;);\n\n--pepper\nprogram.pepper\n// =&gt; Boolean\n\n// simple boolean defaulting to true\nprogram.option(&#39;-C, --no-cheese&#39;, &#39;remove cheese&#39;);\n\nprogram.cheese\n// =&gt; true\n\n--no-cheese\nprogram.cheese\n// =&gt; false\n\n// required argument\nprogram.option(&#39;-C, --chdir &lt;path&gt;&#39;, &#39;change the working directory&#39;);\n\n--chdir /tmp\nprogram.chdir\n// =&gt; &quot;/tmp&quot;\n\n// optional argument\nprogram.option(&#39;-c, --cheese [type]&#39;, &#39;add cheese [marble]&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 310,
    "codeStart": 359,
    "code": "Command.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this\n    , option = new Option(flags, description)\n    , oname = option.name()\n    , name = camelcase(oname);\n\n  // default as 3rd arg\n  if (typeof fn != 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      }\n    }\n    else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (false == option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (false == option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (undefined !== defaultValue) self[name] = defaultValue;\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on(oname, function(val) {\n    // coercion\n    if (null !== val && fn) val = fn(val, undefined === self[name]\n      ? defaultValue\n      : self[name]);\n\n    // unassigned or bool\n    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {\n      // if no value, bool true, and we have a default, then use it!\n      if (null == val) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (null !== val) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "option",
      "string": "Command.prototype.option()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "arg",
        "description": "<p>if <code>true</code> or omitted, no error will be thrown for unknown options.</p>",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Allow unknown options on the command line.</p>",
      "summary": "<p>Allow unknown options on the command line.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 418,
    "codeStart": 425,
    "code": "Command.prototype.allowUnknownOption = function(arg) {\n    this._allowUnknownOption = arguments.length === 0 || arg;\n    return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "allowUnknownOption",
      "string": "Command.prototype.allowUnknownOption()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "argv",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Parse <code>argv</code>, settings options and invoking commands when defined.</p>",
      "summary": "<p>Parse <code>argv</code>, settings options and invoking commands when defined.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 430,
    "codeStart": 438,
    "code": "Command.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n  if (this._execs[name] && typeof this._execs[name] != \"function\") {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(name = this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parse",
      "string": "Command.prototype.parse()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "argv",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "args",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "unknown",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Execute a sub-command executable.</p>",
      "summary": "<p>Execute a sub-command executable.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 473,
    "codeStart": 482,
    "code": "Command.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if ('help' == args[0] && 1 == args.length) this.help();\n\n  // <cmd> --help\n  if ('help' == args[0]) {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, '.js') + '-' + args[0];\n\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir\n    , link = readlink(f);\n\n  // when symbolink is relative path\n  if (link !== f && link.charAt(0) !== '/') {\n    link = path.join(dirname(f), link)\n  }\n  baseDir = dirname(link);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(localBin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(localBin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit'});\n  }\n\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "executeSubCommand",
      "string": "Command.prototype.executeSubCommand()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "args",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Normalize <code>args</code>, splitting joined short flags. For example<br />the arg &quot;-abc&quot; is equivalent to &quot;-a -b -c&quot;.<br />This also normalizes equal sign and splits &quot;--abc=def&quot; into &quot;--abc def&quot;.</p>",
      "summary": "<p>Normalize <code>args</code>, splitting joined short flags. For example<br />the arg &quot;-abc&quot; is equivalent to &quot;-a -b -c&quot;.<br />This also normalizes equal sign and splits &quot;--abc=def&quot; into &quot;--abc def&quot;.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 555,
    "codeStart": 565,
    "code": "Command.prototype.normalize = function(args) {\n  var ret = []\n    , arg\n    , lastOpt\n    , index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i-1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "normalize",
      "string": "Command.prototype.normalize()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "args",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Parse command <code>args</code>.</p><p>When listener(s) are available those<br />callbacks are invoked, otherwise the &quot;*&quot;<br />event is emitted and those actions are invoked.</p>",
      "summary": "<p>Parse command <code>args</code>.</p>",
      "body": "<p>When listener(s) are available those<br />callbacks are invoked, otherwise the &quot;*&quot;<br />event is emitted and those actions are invoked.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 597,
    "codeStart": 609,
    "code": "Command.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args, unknown);\n    } else {\n      this.emit('*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n  }\n\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseArgs",
      "string": "Command.prototype.parseArgs()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "arg",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Option"
        ],
        "typesDescription": "<code>Option</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return an option matching <code>arg</code> if any.</p>",
      "summary": "<p>Return an option matching <code>arg</code> if any.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 632,
    "codeStart": 640,
    "code": "Command.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "optionFor",
      "string": "Command.prototype.optionFor()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "argv",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Parse options from <code>argv</code> returning <code>argv</code><br />void of these options.</p>",
      "summary": "<p>Parse options from <code>argv</code> returning <code>argv</code><br />void of these options.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 648,
    "codeStart": 657,
    "code": "Command.prototype.parseOptions = function(argv) {\n  var args = []\n    , len = argv.length\n    , literal\n    , option\n    , arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if ('--' == arg) {\n      literal = true;\n      continue;\n    }\n\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (null == arg) return this.optionMissingArgument(option);\n        this.emit(option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i+1];\n        if (null == arg || ('-' == arg[0] && '-' != arg)) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit(option.name(), arg);\n      // bool\n      } else {\n        this.emit(option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && '-' == arg[0]) {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if (argv[i+1] && '-' != argv[i+1][0]) {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "parseOptions",
      "string": "Command.prototype.parseOptions()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return an object containing options as key-value pairs</p>",
      "summary": "<p>Return an object containing options as key-value pairs</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 727,
    "codeStart": 733,
    "code": "Command.prototype.opts = function() {\n  var result = {}\n    , len = this.options.length;\n\n  for (var i = 0 ; i < len; i++) {\n    var key = camelcase(this.options[i].name());\n    result[key] = key === 'version' ? this._version : this[key];\n  }\n  return result;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "opts",
      "string": "Command.prototype.opts()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Argument <code>name</code> is missing.</p>",
      "summary": "<p>Argument <code>name</code> is missing.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 744,
    "codeStart": 751,
    "code": "Command.prototype.missingArgument = function(name) {\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  console.error();\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n  console.error();\n  process.exit(1);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "missingArgument",
      "string": "Command.prototype.missingArgument()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "flag",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Unknown option <code>flag</code>.</p>",
      "summary": "<p>Unknown option <code>flag</code>.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 777,
    "codeStart": 784,
    "code": "Command.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error();\n  console.error(\"  error: variadic arguments must be last `%s'\", name);\n  console.error();\n  process.exit(1);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "unknownOption",
      "string": "Command.prototype.unknownOption()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "str",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "flags",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Set the program version to <code>str</code>.</p><p>This method auto-registers the &quot;-V, --version&quot; flag<br />which will print the version number when passed.</p>",
      "summary": "<p>Set the program version to <code>str</code>.</p>",
      "body": "<p>This method auto-registers the &quot;-V, --version&quot; flag<br />which will print the version number when passed.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 806,
    "codeStart": 818,
    "code": "Command.prototype.version = function(str, flags) {\n  if (0 == arguments.length) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  this.option(flags, 'output the version number');\n  this.on('version', function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "version",
      "string": "Command.prototype.version()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "str",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String",
          "Command"
        ],
        "typesDescription": "<code>String</code>|<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Set the description to <code>str</code>.</p>",
      "summary": "<p>Set the description to <code>str</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 830,
    "codeStart": 838,
    "code": "Command.prototype.description = function(str) {\n  if (0 === arguments.length) return this._description;\n  this._description = str;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "description",
      "string": "Command.prototype.description()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "alias",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String",
          "Command"
        ],
        "typesDescription": "<code>String</code>|<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Set an alias for the command</p>",
      "summary": "<p>Set an alias for the command</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 844,
    "codeStart": 852,
    "code": "Command.prototype.alias = function(alias) {\n  if (0 == arguments.length) return this._alias;\n  this._alias = alias;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "alias",
      "string": "Command.prototype.alias()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "str",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String",
          "Command"
        ],
        "typesDescription": "<code>String</code>|<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Set / get the command usage <code>str</code>.</p>",
      "summary": "<p>Set / get the command usage <code>str</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 858,
    "codeStart": 866,
    "code": "Command.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]'\n    + (this.commands.length ? ' [command]' : '')\n    + (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (0 == arguments.length) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "usage",
      "string": "Command.prototype.usage()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String",
          "Command"
        ],
        "typesDescription": "<code>String</code>|<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Get the name of the command</p>",
      "summary": "<p>Get the name of the command</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 881,
    "codeStart": 889,
    "code": "Command.prototype.name = function() {\n  return this._name;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "name",
      "string": "Command.prototype.name()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return the largest option length.</p>",
      "summary": "<p>Return the largest option length.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 893,
    "codeStart": 900,
    "code": "Command.prototype.largestOptionLength = function() {\n  return this.options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "largestOptionLength",
      "string": "Command.prototype.largestOptionLength()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return help for options.</p>",
      "summary": "<p>Return help for options.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 906,
    "codeStart": 913,
    "code": "Command.prototype.optionHelp = function() {\n  var width = this.largestOptionLength();\n\n  // Prepend the help information\n  return [pad('-h, --help', width) + '  ' + 'output usage information']\n      .concat(this.options.map(function(option) {\n        return pad(option.flags, width) + '  ' + option.description;\n      }))\n      .join('\\n');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "optionHelp",
      "string": "Command.prototype.optionHelp()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return command help documentation.</p>",
      "summary": "<p>Return command help documentation.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 924,
    "codeStart": 931,
    "code": "Command.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name\n        + (cmd._alias ? '|' + cmd._alias : '')\n        + (cmd.options.length ? ' [options]' : '')\n        + ' ' + args\n      , cmd.description()\n    ];\n  });\n\n  var width = commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n\n  return [\n    ''\n    , '  Commands:'\n    , ''\n    , commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return pad(cmd[0], width) + desc;\n    }).join('\\n').replace(/^/gm, '    ')\n    , ''\n  ].join('\\n');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "commandHelp",
      "string": "Command.prototype.commandHelp()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return program help documentation.</p>",
      "summary": "<p>Return program help documentation.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 966,
    "codeStart": 973,
    "code": "Command.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      '  ' + this._description\n      , ''\n    ];\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    ''\n    ,'  Usage: ' + cmdName + ' ' + this.usage()\n    , ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    '  Options:'\n    , ''\n    , '' + this.optionHelp().replace(/^/gm, '    ')\n    , ''\n    , ''\n  ];\n\n  return usage\n    .concat(cmds)\n    .concat(desc)\n    .concat(options)\n    .join('\\n');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "helpInformation",
      "string": "Command.prototype.helpInformation()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Output help information for this command</p>",
      "summary": "<p>Output help information for this command</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1011,
    "codeStart": 1017,
    "code": "Command.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    }\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "outputHelp",
      "string": "Command.prototype.outputHelp()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Output help information and exit.</p>",
      "summary": "<p>Output help information and exit.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1027,
    "codeStart": 1033,
    "code": "Command.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};",
    "ctx": {
      "type": "method",
      "constructor": "Command",
      "cons": "Command",
      "name": "help",
      "string": "Command.prototype.help()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "flag",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Camel-case the given <code>flag</code></p>",
      "summary": "<p>Camel-case the given <code>flag</code></p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1038,
    "codeStart": 1046,
    "code": "function camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}",
    "ctx": {
      "type": "function",
      "name": "camelcase",
      "string": "camelcase()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "str",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "width",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Pad <code>str</code> to <code>width</code>.</p>",
      "summary": "<p>Pad <code>str</code> to <code>width</code>.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1052,
    "codeStart": 1061,
    "code": "function pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}",
    "ctx": {
      "type": "function",
      "name": "pad",
      "string": "pad()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "command",
        "description": "<p>to output help for</p>",
        "types": [
          "Command"
        ],
        "typesDescription": "<a href=\"Command.html\">Command</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "name": "array",
        "description": "<p>of options to search for -h or --help</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Output help information if necessary</p>",
      "summary": "<p>Output help information if necessary</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1066,
    "codeStart": 1074,
    "code": "function outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] == '--help' || options[i] == '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}",
    "ctx": {
      "type": "function",
      "name": "outputHelpIfNecessary",
      "string": "outputHelpIfNecessary()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "name": "arg",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Takes an argument an returns its human readable equivalent for help usage.</p>",
      "summary": "<p>Takes an argument an returns its human readable equivalent for help usage.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 1084,
    "codeStart": 1092,
    "code": "function humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']'\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}",
    "ctx": {
      "type": "function",
      "name": "humanReadableArgName",
      "string": "humanReadableArgName()"
    }
  }
]